// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
//compute_x
//x=0 if zx=0 and then x=x' if nx =1
Mux16(a=x,b=false,sel=zx,out=xiszeroornot);
Not16(in=xiszeroornot,out=notx);
Mux16(a=xiszeroornot,b=notx,sel=nx,out=finalx);

//compute_y
//y=0 if zy=0 and then y=y' if ny =1

Mux16(a=y,b=false,sel=zy,out=yiszeroornot);
Not16(in=yiszeroornot,out=noty);
Mux16(a=yiszeroornot,b=noty,sel=ny,out=finaly);


//compute_function
//if f=0, out=x&y else x+y
Add16(a=finalx,b=finaly,out=xsy);
And16(a=finalx,b=finaly,out=xandy);
Mux16(a=xandy,b=xsy,sel=f,out=functxy);

//no
//if no=0 then out=previos out else prev_out'
//final op is divided into 3 parts 0-7, 8-15(i.e 0-15) and 15 to calculate zr and ng respectively

Not16(in=functxy,out=notfunctxy);
Mux16(a=functxy,b=notfunctxy,sel=no,out=out,out[0..7]=out0,out[8..15]=out1,out[15]=out3);

//zr and ng
//zr=1 when op=0
//ng=1 when op=-ve i.e when msb of op is 1 i.e out[15]=ng


Or8Way(in=out0,out=or1);
Or8Way(in=out1,out=or2);
Or(a=or1,b=or2,out=orsel);
//Mux(a=true,b=false,sel=orsel,out=zr);
Not(in=orsel,out=zr);
And(a=out3,b=true,out=ng);

}